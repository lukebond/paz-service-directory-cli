#!/usr/bin/env node

var cli = require('cli'),
    fs = require('fs'),
    restify = require('restify'),
    AsciiTable = require('ascii-table');

var settableFields = {
  name: 'string',
  dockerImage: 'string',
  gitReceiveHook: 'string',
  autoDeploy: 'string',
  numInstances: 'number'
};

cli.parse(
  {
    host: ['h', 'alexandria server hostname', 'host', 'localhost'],
    port: ['p', 'alexandria server port', 'number', 9000],
    json: ['json', 'Produce JSON output', 'boolean', false],
    file: [
      'f',
      'Outputs unitfile to a file instead of stdout (uses <service name>.service)',
      'boolean',
      false
    ],
    set:  [
      's',
      'Sets field values. Only applies to \'modify\' command, for which it is '
        + 'required. Either pass @filename or send comma-delimited key-value pairs '
        + '(e.g. --set key=value,key=value...). '
        + 'Only the following fields are settable via the latter method: '
        + Object.keys(settableFields).join(', ') + '.',
      'string'
    ]
  },
  ['list', 'show', 'modify', 'unitfile', 'delete']);

var client = restify.createJsonClient({
  url: 'http://' + cli.options.host + ':' + cli.options.port
});

function ensureServiceNamePassed() {
  if (cli.args.length == 0) {
    cli.error('You must specify a service name.');
    process.exit(1);
  }
}

function getSetParamChanges() {
  if (!cli.options.set) {
    cli.error('You must specify a --set parameter.');
    process.exit(1);
  }
  if (cli.options.set.indexOf('@') == 0) {
    var filename = cli.options.set.substring(1);
    // XXX some sort of error handling here!
    var contents = fs.readFileSync(filename).toString();
    return JSON.parse(contents);
  }
  if (!cli.options.set.match(/^[^=]+=[^=]+/)) {
    cli.error('Bad format of --set parameter.');
    process.exit(1);
  }
  var changes = {};
  cli.options.set.split(',').forEach(function (kvString) {
    var kvSplit = kvString.split('=');
    if (!settableFields[kvSplit[0]]) {
      cli.error('Field \'' + kvSplit[0] + '\' not settable. Use @ method.');
      process.exit(1);
    }
    else {
      changes[kvSplit[0]] = settableFields[kvSplit[0]] === 'number'
        ? +(kvSplit[1])
        : kvSplit[1];
    }
  });
  return changes;
}

function showService(name) {
  client.get('/services/' + name, function (err, req, res, obj) {
    if (err) {
      cli.error(err.message);
      process.exit(1);
    }
    if (cli.options.json) {
      console.log(obj);
    }
    else {
      printServicesTable([obj]);
    }
    client.close();
  });
}

function printServicesTable(rows) {
  var table = new AsciiTable();
  table.setHeadingAlignLeft().removeBorder();
  table.setHeading(
    'NAME', 'DOCKER IMAGE', '# INSTANCES', 'MODIFIED');
  var now = Date.now();
  rows.forEach(function (service) {
    table.addRow(
      service.name, service.dockerImage, service.numInstances,
      getModified(service.lastModifiedTime, now));
  });
  console.log(table.toString());
}

function getModified(when, now) {
  var delta = (now - when);
  if (delta < 120000) {
    return 'Just now';
  }
  else if (delta < 3000000) {
    return Math.floor(delta / 60000) + ' minutes ago';
  }
  else if (delta < 7200000) {
    return 'About an hour ago';
  }
  else if (delta < 36000000) {
    return Math.floor(delta / 3600000) + ' hours ago';
  }
  else if (delta < 172800000) {
    return 'About a day ago';
  }
  else {
    return Math.floor(delta / 86400000) + ' days ago';
  }
}

switch (cli.command) {
  case 'list':
    if (cli.args.length > 0) {
      cli.info('Ingoring additional arguments ' + cli.args);
    }
    client.get('/services', function (err, req, res, obj) {
      if (err) {
        cli.error(err.message);
        process.exit(1);
      }
      if (cli.options.json) {
        console.log(obj);
      }
      else {
        printServicesTable(obj.services);
      }
      client.close();
    });
    break;
  case 'show':
    ensureServiceNamePassed();
    showService(cli.args[0]);
    break;
  case 'modify':
    ensureServiceNamePassed();
    var changes = getSetParamChanges();
    client.patch('/services/' + cli.args[0], changes, function (err, req, res, obj) {
      if (err) {
        cli.error(err.message);
        process.exit(1);
      }
      client.close();
      if (cli.options.json) {
        console.log(obj);
      }
      else {
        showService(cli.args[0]);
      }
    });

    break;
  case 'unitfile':
    ensureServiceNamePassed();
    client.get('/services/' + cli.args[0] + '/unitfile', function (err, req, res, obj) {
      if (err) {
        cli.error(err.message);
        process.exit(1);
      }
      if (cli.options.json) {
        console.log(obj.unitFiles);
      }
      else {
        var index = 1;
        obj.unitFiles.forEach(function (uf) {
          if (cli.options.file) {
            fs.writeFileSync(cli.args[0] + '-' + index + '.service', uf);
          }
          else {
            console.log(uf);
          }
          ++index;
        });
      }
      client.close();
    });
    break;
  case 'delete':
    ensureServiceNamePassed();
    client.del('/services/' + cli.args[0], function (err, req, res, obj) {
      if (err) {
        cli.error(err.message);
        process.exit(1);
      }
      cli.info('Service "' + cli.args[0] + '" deleted.');
      client.close();
    });
    break;
}

// client.get('/alerts?state=new', function (err, req, res, obj) {
// });

// list show unitfile delete
